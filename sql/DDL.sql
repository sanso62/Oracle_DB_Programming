drop table review;
drop table users;
drop table discount;
drop table subs;
drop table srv;
drop view SUBS_AVG;

CREATE TABLE srv(
    SRV_ID NUMBER(2) PRIMARY KEY,
    NAME VARCHAR(10) NOT NULL,
    URL VARCHAR(20) NOT NULL
);

INSERT INTO srv VALUES(11, 'NETFLIX', 'WWW.NETFLIX.NET');
INSERT INTO srv VALUES(17, 'MELLON', 'WWW.MELLON.NET');
INSERT INTO srv VALUES(27, 'COUPANG', 'WWW.COUPANG.NET');
INSERT INTO srv VALUES(84, 'AMAZON', 'WWW.AMAZON.NET');
INSERT INTO srv VALUES(99, 'SPOTIFY', 'WWW.SPOTIFY.NET');

CREATE TABLE subs(
    SUBS_ID NUMBER(3) PRIMARY KEY,
    SRV_ID NUMBER(2) NOT NULL,
    NAME VARCHAR2(20),
    PRICE NUMBER(10),
    FOREIGN KEY(SRV_ID) REFERENCES srv(SRV_ID)
    ON DELETE CASCADE
    );

INSERT INTO subs VALUES(111, 11, 'NEFLIX_STANDARD', 10000);
INSERT INTO subs VALUES(222, 11, 'NEFLIX_DUO', 12000);
INSERT INTO subs VALUES(333, 17, 'MELON_NORMAL', 8000);
INSERT INTO subs VALUES(444, 84, 'AMAZON_STANDARD', 11000);
INSERT INTO subs VALUES(555, 99, 'SPOTIFY_SOLO', 9000);
INSERT INTO subs VALUES(666, 99, 'SPOTIFY_DUO', 12000);
INSERT INTO subs VALUES(777, 99, 'SPOTIFY_ULTRA', 15000);
INSERT INTO subs VALUES(888, 27, 'COUPANG', 4000);

CREATE TABLE discount(  -- discount, discount_info гуд╖
    subs_id NUMBER(3) PRIMARY KEY,
    PRICE NUMBER(10),
    ENDDATE DATE,
    FOREIGN KEY(SUBS_ID) REFERENCES subs(SUBS_ID)
    );

INSERT INTO discount VALUES(111, 5000, to_date('17-12-2022','dd-mm-yyyy'));
INSERT INTO discount VALUES(333, 2000, to_date('17-12-2022','dd-mm-yyyy'));
INSERT INTO discount VALUES(888, 3000, to_date('17-12-2022','dd-mm-yyyy'));


CREATE TABLE users(
    USER_ID VARCHAR2(10) PRIMARY KEY,
    PW VARCHAR2(10),
    PHONE_NUM NUMBER(12)
);

INSERT INTO users VALUES('ALICE', '123AA', 01022228888);
INSERT INTO users VALUES('DAVID', 'B3344', 01034355563);

CREATE TABLE review(
    SUBS_ID NUMBER(3) NOT NULL,
    USER_ID VARCHAR2(10) NOT NULL,
    SCORE NUMBER(3) NOT NULL,
    CONSTRAINT SCORES_CONS PRIMARY KEY(SUBS_ID, USER_ID),
    FOREIGN KEY(SUBS_ID) REFERENCES subs(SUBS_ID),
    FOREIGN KEY(USER_ID) REFERENCES users(USER_ID),
    CHECK((SCORE>=0) AND (SCORE<=100))
);

INSERT INTO review VALUES(111, 'ALICE', 70);
INSERT INTO review VALUES(555, 'DAVID', 70);

CREATE VIEW SUBS_AVG(SUBS, SCORE)
AS SELECT SUBS_ID, AVG(SCORE) FROM REVIEW
GROUP BY SUBS_ID;
